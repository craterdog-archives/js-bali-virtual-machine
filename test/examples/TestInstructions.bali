[
    $description: "
        This class, when compiled, generates all of the possible machine instructions.
    "(
        $mediatype: "application/bsmd"
    )
    $parameters: [
        $requiredParam: [
            $description: "The first parameter."
            $type: /bali/elements/Text/v1
        ]
        $optionalParam: [
            $description: "An optional second parameter."
            $type: /bali/elements/Number/v1($range: [1..infinity])
            $default: 5
        ]
    ]
    $attributes: [
        $requiredAttr: [
            $description: "The first attribute."
            $type: /bali/collections/Catalog/v1(
                $keyType: /bali/elements/Symbol/v1
                $valueType: /bali/elements/Text/v1
            )
        ]
        $optionalAttr: [
            $description: "An optional second attribute."
            $type: /bali/collections/List/v1(
                $itemType: /bali/elements/Number/v1
            )
            $default: []
        ]
    ]
    $procedures: [
        $run: [
            $description: "This procedure runs the program that tests all machine instructions."
            $result: /bali/elements/Probability/v1(
                $granularity: $boolean
            )
            $source: {
                target[requiredAttr] := [
                    $alpha: "alpha"
                    $beta: "beta"
                    $gamma: "gamma"
                ]
                target[optionalAttr] := target.procWithNoParams()
                target.procWithParams(target.getParameters($optionalParam))
                if not target[optionalAttr].getSize() = 5 then {
                    throw [
                        $text: "The procedure with parameters should have added 3 items to the list."
                    ]
                } handle $exception matching any with {
                    return false
                }
                return true
            }
        ]
        $procWithNoParams: [
            $description: "This procedure takes no parameters and returns a list containing three numbers."
            $result: /bali/collections/List/v1(
                $itemType: /bali/elements/Number/v1
            )
            $source: {
                $list := []
                with each $count in [1..3] do {
                    list.addItem(count)
                }
                return list
            }
        ]($access: $private)
        $procWithParams: [
            $description: "This procedure takes one parameter and doesn't return anything."
            $parameters: [
                $newItem: [
                    $description: "A new item to add to the optional attribute list."
                    $type: /bali/elements/Number/v1
                ]
            ]
            $source: {
                target[optionalAttr].addItem(newItem)
                target[optionalAttr].addItem(target[optionalParam])
            }(
                $newItem: /bali/abstractions/Component
            )
        ]($access: $private)
    ]
](
    $type: /bali/abstractions/Class/v1
    $name: /bali/examples/TestInstructions/v1
    $tag: #4C5J3L0JXXJXTQYTNQPBXA3TL5Q4XAGB
    $version: v1
    $permissions: /bali/permissions/public/v1
    $previous: none
)
