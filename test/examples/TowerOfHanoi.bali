[
    $description: "
        This class encapsulates a /Tower of Hanoi/ game with three pegs (A, B, and C) and a
        parameterized number of disks. To play the game do the following:

         # Initialize a game with 3 disks.
        `$game := [:]($type: /bali/examples/TowerOfHanoi/v1)`

         # Play the game.
        `game.play()`

        The output should be:
        `
         1. Move top disk on peg A to peg C
         2. Move top disk on peg A to peg B
         3. Move top disk on peg C to peg B
         4. Move top disk on peg A to peg C
         5. Move top disk on peg B to peg A
         6. Move top disk on peg B to peg C
         7. Move top disk on peg A to peg C
        `
    "($mediaType: "application/bsmd")
    $parent: /bali/abstractions/Component/v1
    $attributes: [
        $pegs: [
            $description: "The three pegs (A, B and C) that are used to hold the disks."
            $type: /bali/collections/Catalog/v1(
                $keyType: /bali/elements/Symbol/v1
                $valueType: /bali/collections/Stack/v1(
                    $itemType: /bali/elements/Number/v1($range: [1..])
                )
            )
        ]
        $steps: [
            $description: "The steps needed to move the disks."
            $type: /bali/collections/List/v1(
                $itemType: /bali/elements/Text/v1
            )
        ]
    ]
    $methods: [
        $play: [
            $description: "This procedure causes the game to (re)initialize itself and play the game."
            $parameters: [
                $numberOfDisks: [
                    $description: "The number of disks."
                    $type: /bali/elements/Number/v1($range: [1..])
                ]
            ]
            $type: /bali/collections/Catalog/v1(
                $keyType: /bali/elements/Number/v1($range: [1..])
                $valueType: /bali/elements/Text/v1
            )
            $procedure: {
                target[$pegs] := [
                    "peg A": [](
                        $type: /bali/collections/Stack/v1(
                            $itemType: /bali/elements/Number/v1($range: [1..])
                        )
                    )
                    "peg B": [](
                        $type: /bali/collections/Stack/v1(
                            $itemType: /bali/elements/Number/v1($range: [1..])
                        )
                    )
                    "peg C": [](
                        $type: /bali/collections/Stack/v1(
                            $itemType: /bali/elements/Number/v1($range: [1..])
                        )
                    )
                ]
                target[$steps] := []
                $disks := range(numberOfDisks, 1)
                with each $n in disks do {
                    target[$pegs, "peg A"].addItem(n)
                }
                target.moveTower(numberOfDisks, "peg A", "peg C", "peg B")
                return target[$steps].asCatalog()
            }
        ]
        $moveTower: [
            $description: "This procedure causes the game to move a tower of disks of a certain height from one peg to another peg using a third peg as a buffer."
            $parameters: [
                $height: [
                    $description: "The height of the tower to be moved."
                    $type: /bali/elements/Number/v1($range: [1..])
                ]
                $fromPeg: [
                    $description: "The peg from which the disks originate."
                    $type: /bali/elements/Text/v1
                ]
                $toPeg: [
                    $description: "The peg to which the disks should be moved."
                    $type: /bali/elements/Text/v1
                ]
                $withPeg: [
                    $description: "The peg to use to buffer the disks during the move."
                    $type: /bali/elements/Text/v1
                ]
            ]
            $procedure: {
                if height then {
                    target.moveTower(height - 1, fromPeg, withPeg, toPeg)
                    target.moveDisk(fromPeg, toPeg)
                    target.moveTower(height - 1, withPeg, toPeg, fromPeg)
                }
            }
        ]($access: $private)
        $moveDisk: [
            $description: "This procedure causes the game to move the top disk from one peg to another."
            $parameters: [
                $fromPeg: [
                    $description: "The peg from which the disk originates."
                    $type: /bali/elements/Text/v1
                ]
                $toPeg: [
                    $description: "The peg to which the disk should be moved."
                    $type: /bali/elements/Text/v1
                ]
            ]
            $procedure: {
                $disk := target[$pegs, fromPeg].removeItem()
                target[$pegs, toPeg].addItem(disk)
                target[$steps].append("Move disk {disk} from {fromPeg} to {toPeg}.")
            }
        ]($access: $private)
    ]
](
    $type: /bali/types/Class/v1
    $name: /bali/examples/TowerOfHanoi/v1
    $tag: #1M9WB8VXAWP8A0T1K3MHWD4ZFBM3MG7T
    $version: v1
    $permissions: /bali/permissions/public/v1
    $previous: none
)
