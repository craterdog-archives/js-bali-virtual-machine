[
    $description: "
        This type defines a method that tests each type of instruction at least once.
    "($mediaType: "application/bsmd")
    $parent: none
    $constants: [
        $good: true
        $contract: /bali/instances/Test/v1
        $firstVersion: /bali/instances/Test/v1
        $secondVersion: /bali/instances/Test/v2
        $thirdVersion: /bali/instances/Test/v2.1
        $bag: /bali/vm/messages/v1
        $event: [
            $tag: #BWWG6DP3XBZ4JTP2XQ1BLN8WF5L9ZX0Y
        ]
    ]
    $methods: [
        $test1: [
            $description: "
                This method helps test each type of instruction at least once.
            "($mediaType: "application/bsmd")
            $type: /bali/elements/Probability/v1
            $parameters: [
                $argument: [
                    $description: "
                        This parameter specifies the argument to be passed to the test message.
                    "($mediaType: "application/bsmd")
                    $type: /bali/elements/Text/v1
                ]
            ]
            $procedure: {
                $x := target.test3(argument) handle $exception matching "good" with {
                    contract<-test2()
                    return good
                } matching "bad" with {
                    target.test2()
                }
                contract<-test3(argument)
                return NOT good
            }($argument: "ugly")
            $instructions: "
                1.EvaluateStatement:
                PUSH HANDLER 1.EvaluateStatementHandler
                PUSH ARGUMENT $target
                NOTE --Place a list of the message arguments on the stack.
                CALL $list
                PUSH ARGUMENT $argument
                CALL $addItem WITH 2 ARGUMENTS
                NOTE --Send the message with its arguments to the recipient.
                SEND $test3 TO COMPONENT WITH ARGUMENTS
                SAVE VARIABLE $x
                
                1.EvaluateStatementDone:
                PULL HANDLER
                JUMP TO 1.EvaluateStatementSucceeded
                
                1.EvaluateStatementHandler:
                SAVE VARIABLE $exception
                
                1.1.HandleBlock:
                LOAD VARIABLE $exception
                PUSH LITERAL `"good"`
                CALL $doesMatch WITH 2 ARGUMENTS
                JUMP TO 1.2.HandleBlock ON FALSE
                
                1.1.1.EvaluateStatement:
                PUSH CONSTANT $contract
                SEND $test2 TO DOCUMENT
                SAVE VARIABLE $result-1
                
                1.1.2.ReturnStatement:
                PUSH CONSTANT $good
                PULL RESULT
                
                1.1.HandleBlockDone:
                JUMP TO 1.EvaluateStatementSucceeded
                
                1.2.HandleBlock:
                LOAD VARIABLE $exception
                PUSH LITERAL `"bad"`
                CALL $doesMatch WITH 2 ARGUMENTS
                JUMP TO 1.EvaluateStatementFailed ON FALSE
                
                1.2.1.EvaluateStatement:
                PUSH ARGUMENT $target
                SEND $test2 TO COMPONENT
                SAVE VARIABLE $result-1
                
                1.2.HandleBlockDone:
                JUMP TO 1.EvaluateStatementSucceeded
                
                1.EvaluateStatementFailed:
                LOAD VARIABLE $exception
                PULL EXCEPTION
                
                1.EvaluateStatementSucceeded:
                JUMP TO NEXT INSTRUCTION
                
                2.EvaluateStatement:
                PUSH CONSTANT $contract
                NOTE --Place a list of the message arguments on the stack.
                CALL $list
                PUSH ARGUMENT $argument
                CALL $addItem WITH 2 ARGUMENTS
                NOTE --Send the message with its arguments to the recipient.
                SEND $test3 TO DOCUMENT WITH ARGUMENTS
                SAVE VARIABLE $result-1
                
                3.ReturnStatement:
                PUSH CONSTANT $good
                CALL $not WITH 1 ARGUMENT
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.EvaluateStatement": 1
                "1.EvaluateStatementDone": 8
                "1.EvaluateStatementHandler": 10
                "1.1.HandleBlock": 11
                "1.1.1.EvaluateStatement": 15
                "1.1.2.ReturnStatement": 18
                "1.1.HandleBlockDone": 20
                "1.2.HandleBlock": 21
                "1.2.1.EvaluateStatement": 25
                "1.2.HandleBlockDone": 28
                "1.EvaluateStatementFailed": 29
                "1.EvaluateStatementSucceeded": 31
                "2.EvaluateStatement": 32
                "3.ReturnStatement": 38
            ]
            $bytecode: '
                200A3801C0413802D001E80280034000001F80016001280CD02418153002
                F001800230015000001F6001280BD024181D3801E0018002001F60015800
                00003002C0413802D001F80280023001C84D5000
            '(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
                $argument
            ]
            $variables: [
                $exception
                $result-1
                $x
            ]($type: /bali/collections/Set/v1)
            $messages: [
                $test2
                $test3
            ]($type: /bali/collections/Set/v1)
        ]
        $test2: [
            $description: "
                This method helps test each type of instruction at least once.
            "($mediaType: "application/bsmd")
            $type: /bali/collections/Set/v1
            $procedure: {
                return [
                    "alpha"
                ]($type: /bali/collections/Set/v1)
            }
            $instructions: "
                1.ReturnStatement:
                NOTE --Place an empty set on the stack.
                NOTE --Place a catalog of the parameters on the stack.
                CALL $catalog
                PUSH LITERAL `$type`
                PUSH LITERAL `/bali/collections/Set/v1`
                CALL $setAttribute WITH 3 ARGUMENTS
                CALL $set WITH 1 ARGUMENT
                NOTE --Add an item to the set.
                PUSH LITERAL `"alpha"`
                CALL $addItem WITH 2 ARGUMENTS
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.ReturnStatement": 1
            ]
            $bytecode: 'C01328082801D86CC86B280AD0015000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [ ]($type: /bali/collections/Set/v1)
            $messages: [ ]($type: /bali/collections/Set/v1)
        ]
        $test3: [
            $description: "
                This method helps test each type of instruction at least once.
            "($mediaType: "application/bsmd")
            $parameters: [
                $text: [
                    $description: "
                        This parameter specifies the text to be thrown in an exception.
                    "($mediaType: "application/bsmd")
                    $type: /bali/elements/Text/v1
                ]
            ]
            $procedure: {
                throw text
            }
            $instructions: "
                1.ThrowStatement:
                PUSH ARGUMENT $text
                PULL EXCEPTION
            "($mediaType: "application/basm")
            $addresses: [
                "1.ThrowStatement": 1
            ]
            $bytecode: '38025800'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
                $text
            ]
            $variables: [ ]($type: /bali/collections/Set/v1)
            $messages: [ ]($type: /bali/collections/Set/v1)
        ]
        $test4: [
            $description: "
                This method helps test each type of instruction at least once.
            "($mediaType: "application/bsmd")
            $procedure: {
                checkout $document from firstVersion
                sign document as secondVersion
                checkout level 2 of $document from secondVersion
                save document as $citation
                discard citation
                publish event
                post [
                    $text: "This is a message..."
                ] to bag
            }
            $instructions: "
                1.CheckoutStatement:
                NOTE --Save the name of the contract.
                PUSH CONSTANT $firstVersion
                SAVE VARIABLE $name-2
                NOTE --Load a copy of the named contract from the repository.
                LOAD CONTRACT $name-2
                PUSH LITERAL `$document`
                CALL $attribute WITH 2 ARGUMENTS
                CALL $duplicate WITH 1 ARGUMENT
                SAVE VARIABLE $document-3
                NOTE --Calculate the new version string for the new document and save it.
                LOAD VARIABLE $document-3
                CALL $parameters WITH 1 ARGUMENT
                PUSH LITERAL `$version`
                CALL $attribute WITH 2 ARGUMENTS
                PUSH LITERAL `0`
                CALL $nextVersion WITH 2 ARGUMENTS
                SAVE VARIABLE $version-4
                NOTE --Set the new version string parameter for the new document.
                LOAD VARIABLE $document-3
                PUSH LITERAL `$version`
                LOAD VARIABLE $version-4
                CALL $setParameter WITH 3 ARGUMENTS
                PULL COMPONENT
                NOTE --Set the new document as the value of the recipient.
                LOAD VARIABLE $document-3
                SAVE VARIABLE $document
                
                2.SignStatement:
                NOTE --Save the name of the new contract.
                PUSH CONSTANT $secondVersion
                SAVE VARIABLE $name-5
                NOTE --Sign the named contract and save to the repository.
                LOAD VARIABLE $document
                SAVE CONTRACT $name-5
                
                3.CheckoutStatement:
                NOTE --Save the name of the contract.
                PUSH CONSTANT $secondVersion
                SAVE VARIABLE $name-6
                NOTE --Load a copy of the named contract from the repository.
                LOAD CONTRACT $name-6
                PUSH LITERAL `$document`
                CALL $attribute WITH 2 ARGUMENTS
                CALL $duplicate WITH 1 ARGUMENT
                SAVE VARIABLE $document-7
                NOTE --Calculate the new version string for the new document and save it.
                LOAD VARIABLE $document-7
                CALL $parameters WITH 1 ARGUMENT
                PUSH LITERAL `$version`
                CALL $attribute WITH 2 ARGUMENTS
                PUSH LITERAL `2`
                CALL $nextVersion WITH 2 ARGUMENTS
                SAVE VARIABLE $version-8
                NOTE --Set the new version string parameter for the new document.
                LOAD VARIABLE $document-7
                PUSH LITERAL `$version`
                LOAD VARIABLE $version-8
                CALL $setParameter WITH 3 ARGUMENTS
                PULL COMPONENT
                NOTE --Set the new document as the value of the recipient.
                LOAD VARIABLE $document-7
                SAVE VARIABLE $document
                
                4.SaveStatement:
                NOTE --Place the document on the stack.
                LOAD VARIABLE $document
                NOTE --Save the document to the repository and a citation to it.
                SAVE DOCUMENT $citation-9
                LOAD VARIABLE $citation-9
                SAVE VARIABLE $citation
                
                5.DiscardStatement:
                NOTE --Save the citation to the document.
                LOAD VARIABLE $citation
                SAVE VARIABLE $citation-10
                NOTE --Drop the cited document from the repository.
                DROP DOCUMENT $citation-10
                
                6.PublishStatement:
                NOTE --Save the name of the global event bag.
                PUSH LITERAL `/bali/vm/events/v1`
                SAVE VARIABLE $bag-11
                NOTE --Publish an event to the global event bag.
                PUSH CONSTANT $event
                SAVE MESSAGE $bag-11
                
                7.PostStatement:
                NOTE --Save the name of the message bag.
                PUSH CONSTANT $bag
                SAVE VARIABLE $bag-12
                NOTE --Post a message to the named message bag.
                NOTE --Place an empty catalog on the stack.
                CALL $catalog
                NOTE --Add an item to the catalog.
                PUSH LITERAL `$text`
                PUSH LITERAL `"This is a message..."`
                CALL $association WITH 2 ARGUMENTS
                CALL $addItem WITH 2 ARGUMENTS
                SAVE MESSAGE $bag-12
                LOAD VARIABLE $result-1
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.CheckoutStatement": 1
                "2.SignStatement": 22
                "3.CheckoutStatement": 26
                "4.SaveStatement": 47
                "5.DiscardStatement": 51
                "6.PublishStatement": 54
                "7.PostStatement": 58
            ]
            $bytecode: '
                3003800970092806D00AC82580076007C8502809D00A2803D04B800D6007
                2809600DD8704800600780063004800A6006900A3004800B700B2806D00A
                C82580086008C8502809D00A2804D04B800E60082809600ED87048006008
                8006600688056005800360038004A804280280013007980130068002C013
                2807280DD009D0019802600C5000
            '(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [
                $bag-11
                $bag-12
                $citation
                $citation-10
                $citation-9
                $document
                $document-3
                $document-7
                $name-2
                $name-5
                $name-6
                $result-1
                $version-4
                $version-8
            ]($type: /bali/collections/Set/v1)
            $messages: [ ]($type: /bali/collections/Set/v1)
        ]
        $test5: [
            $description: "
                This method helps test each type of instruction at least once.
            "($mediaType: "application/bsmd")
            $procedure: {
                retrieve $message from bag
            }
            $instructions: "
                1.RetrieveStatement:
                NOTE --Save the name of the message bag.
                PUSH CONSTANT $bag
                SAVE VARIABLE $bag-2
                NOTE --Place a message from the message bag on the stack.
                NOTE --Note: this call blocks until a message is available from the bag.
                LOAD MESSAGE $bag-2
                SAVE VARIABLE $message
                LOAD VARIABLE $result-1
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.RetrieveStatement": 1
            ]
            $bytecode: '300680017801800260035000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [
                $bag-2
                $message
                $result-1
            ]($type: /bali/collections/Set/v1)
            $messages: [ ]($type: /bali/collections/Set/v1)
        ]
    ]
    $literals: [
        /bali/collections/Set/v1
        /bali/vm/events/v1
        0
        2
        none
        $document
        $text
        $type
        $version
        "alpha"
        "bad"
        "good"
        "This is a message..."
    ]($type: /bali/collections/Set/v1)
](
    $type: /bali/types/Primitive/v1
    $tag: #JXPSTDZSDHW4J1N5YF98D45QC8ZAQPXV
    $version: v1
    $permissions: /bali/permissions/public/v1
    $previous: none
)
