[
    $description: "
        This type defines a method that tests each type of instruction at least once.
    "($mediaType: "application/bsmd")
    $parent: none
    $constants: [
        $good: true
        $document: /bali/instances/Test/v1
        $firstVersion: /bali/instances/Test/v1
        $secondVersion: /bali/instances/Test/v2
        $thirdVersion: /bali/instances/Test/v2.1
        $bag: /bali/vm/messages/v1
        $event: [
            $tag: #BWWG6DP3XBZ4JTP2XQ1BLN8WF5L9ZX0Y
        ]
    ]
    $methods: [
        $test1: [
            $description: "
                This method helps test each type of instruction at least once.
            "($mediaType: "application/bsmd")
            $type: /bali/elements/Probability/v1
            $parameters: [
                $argument: [
                    $description: "
                        This parameter specifies the argument to be passed to the test message.
                    "($mediaType: "application/bsmd")
                    $type: /bali/elements/Text/v1
                ]
            ]
            $procedure: {
                $x := target.test3(argument) handle $exception matching "good" with {
                    document<-test2()
                    return good
                } matching "bad" with {
                    target.test2()
                }
                document<-test3(argument)
                return NOT good
            }($argument: "ugly")
            $instructions: "
                1.EvaluateStatement:
                PUSH HANDLER 1.EvaluateStatementHandler
                PUSH ARGUMENT $target
                ---- Place a list of the message arguments on the stack.
                CALL $list
                PUSH ARGUMENT $argument
                CALL $addItem WITH 2 ARGUMENTS
                ---- Send the message with its arguments to the recipient.
                SEND $test3 TO COMPONENT WITH ARGUMENTS
                SAVE VARIABLE $x
                
                1.EvaluateStatementDone:
                PULL HANDLER
                JUMP TO 1.EvaluateStatementSucceeded
                
                1.EvaluateStatementHandler:
                SAVE VARIABLE $exception
                
                1.1.HandleBlock:
                LOAD VARIABLE $exception
                PUSH LITERAL `"good"`
                CALL $doesMatch WITH 2 ARGUMENTS
                JUMP TO 1.2.HandleBlock ON FALSE
                
                1.1.1.EvaluateStatement:
                PUSH CONSTANT $document
                SEND $test2 TO DOCUMENT
                SAVE VARIABLE $result-1
                
                1.1.2.ReturnStatement:
                PUSH CONSTANT $good
                PULL RESULT
                
                1.1.HandleBlockDone:
                JUMP TO 1.EvaluateStatementSucceeded
                
                1.2.HandleBlock:
                LOAD VARIABLE $exception
                PUSH LITERAL `"bad"`
                CALL $doesMatch WITH 2 ARGUMENTS
                JUMP TO 1.EvaluateStatementFailed ON FALSE
                
                1.2.1.EvaluateStatement:
                PUSH ARGUMENT $target
                SEND $test2 TO COMPONENT
                SAVE VARIABLE $result-1
                
                1.2.HandleBlockDone:
                JUMP TO 1.EvaluateStatementSucceeded
                
                1.EvaluateStatementFailed:
                LOAD VARIABLE $exception
                PULL EXCEPTION
                
                1.EvaluateStatementSucceeded:
                SKIP INSTRUCTION
                
                2.EvaluateStatement:
                PUSH CONSTANT $document
                ---- Place a list of the message arguments on the stack.
                CALL $list
                PUSH ARGUMENT $argument
                CALL $addItem WITH 2 ARGUMENTS
                ---- Send the message with its arguments to the recipient.
                SEND $test3 TO DOCUMENT WITH ARGUMENTS
                SAVE VARIABLE $result-1
                
                3.ReturnStatement:
                PUSH CONSTANT $good
                CALL $not WITH 1 ARGUMENT
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.EvaluateStatement": 1
                "1.EvaluateStatementDone": 8
                "1.EvaluateStatementHandler": 10
                "1.1.HandleBlock": 11
                "1.1.1.EvaluateStatement": 15
                "1.1.2.ReturnStatement": 18
                "1.1.HandleBlockDone": 20
                "1.2.HandleBlock": 21
                "1.2.1.EvaluateStatement": 25
                "1.2.HandleBlockDone": 28
                "1.EvaluateStatementFailed": 29
                "1.EvaluateStatementSucceeded": 31
                "2.EvaluateStatement": 32
                "3.ReturnStatement": 38
            ]
            $bytecode: '
                200A3801C0513802D001E80280034000001F80016001280FD02818153002
                F001800230015000001F6001280ED028181D3801E0018002001F60015800
                00003002C0513802D001F80280023001C85C5000
            '(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
                $argument
            ]
            $variables: [
                $exception
                $result-1
                $x
            ]($type: /bali/collections/Set/v1)
            $messages: [
                $test2
                $test3
            ]($type: /bali/collections/Set/v1)
        ]
        $test2: [
            $description: "
                This method helps test each type of instruction at least once.
            "($mediaType: "application/bsmd")
            $type: /bali/collections/Set/v1
            $procedure: {
                return [
                    "alpha"
                ]($type: /bali/collections/Set/v1)
            }
            $instructions: "
                1.ReturnStatement:
                ---- Place an empty parameterized set on the stack.
                PUSH LITERAL `none`
                ---- Place a catalog of the parameters on the stack.
                CALL $catalog
                PUSH LITERAL `$type`
                PUSH LITERAL `/bali/collections/Set/v1`
                CALL $setValue WITH 3 ARGUMENTS
                CALL $set WITH 2 ARGUMENTS
                ---- Add an item to the set.
                PUSH LITERAL `"alpha"`
                CALL $addItem WITH 2 ARGUMENTS
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.ReturnStatement": 1
            ]
            $bytecode: '2807C014280B2801D884D080280DD0015000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [ ]($type: /bali/collections/Set/v1)
            $messages: [ ]($type: /bali/collections/Set/v1)
        ]
        $test3: [
            $description: "
                This method helps test each type of instruction at least once.
            "($mediaType: "application/bsmd")
            $parameters: [
                $text: [
                    $description: "
                        This parameter specifies the text to be thrown in an exception.
                    "($mediaType: "application/bsmd")
                    $type: /bali/elements/Text/v1
                ]
            ]
            $procedure: {
                throw text
            }
            $instructions: "
                1.ThrowStatement:
                PUSH ARGUMENT $text
                PULL EXCEPTION
            "($mediaType: "application/basm")
            $addresses: [
                "1.ThrowStatement": 1
            ]
            $bytecode: '38025800'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
                $text
            ]
            $variables: [ ]($type: /bali/collections/Set/v1)
            $messages: [ ]($type: /bali/collections/Set/v1)
        ]
        $test4: [
            $description: "
                This method helps test each type of instruction at least once.
            "($mediaType: "application/bsmd")
            $procedure: {
                checkout $draft from firstVersion
                commit draft to secondVersion
                checkout level 2 of $draft from secondVersion
                save draft as $citation
                discard draft
                publish event
                post [
                    $text: "This is a message..."
                ] to bag
            }
            $instructions: "
                1.CheckoutStatement:
                ---- Save the name of the document.
                PUSH CONSTANT $firstVersion
                SAVE VARIABLE $name-2
                ---- Load a draft copy of the named document from the repository.
                LOAD DOCUMENT $name-2
                CALL $duplicate WITH 1 ARGUMENT
                SAVE VARIABLE $draft-3
                ---- Calculate the new version string for the draft and save it.
                LOAD VARIABLE $draft-3
                PUSH LITERAL `$version`
                CALL $parameter WITH 2 ARGUMENTS
                PUSH LITERAL `0`
                CALL $nextVersion WITH 2 ARGUMENTS
                SAVE VARIABLE $version-4
                ---- Set the new version string parameter for the draft document.
                LOAD VARIABLE $draft-3
                PUSH LITERAL `$version`
                LOAD VARIABLE $version-4
                CALL $setParameter WITH 3 ARGUMENTS
                PULL COMPONENT
                ---- Set the new draft document as the value of the recipient.
                LOAD VARIABLE $draft-3
                SAVE VARIABLE $draft
                
                2.CommitStatement:
                ---- Save the name of the document.
                PUSH CONSTANT $secondVersion
                SAVE VARIABLE $name-5
                ---- Commit the named document to the repository.
                LOAD VARIABLE $draft
                SAVE DOCUMENT $name-5
                
                3.CheckoutStatement:
                ---- Save the name of the document.
                PUSH CONSTANT $secondVersion
                SAVE VARIABLE $name-6
                ---- Load a draft copy of the named document from the repository.
                LOAD DOCUMENT $name-6
                CALL $duplicate WITH 1 ARGUMENT
                SAVE VARIABLE $draft-7
                ---- Calculate the new version string for the draft and save it.
                LOAD VARIABLE $draft-7
                PUSH LITERAL `$version`
                CALL $parameter WITH 2 ARGUMENTS
                PUSH LITERAL `2`
                CALL $nextVersion WITH 2 ARGUMENTS
                SAVE VARIABLE $version-8
                ---- Set the new version string parameter for the draft document.
                LOAD VARIABLE $draft-7
                PUSH LITERAL `$version`
                LOAD VARIABLE $version-8
                CALL $setParameter WITH 3 ARGUMENTS
                PULL COMPONENT
                ---- Set the new draft document as the value of the recipient.
                LOAD VARIABLE $draft-7
                SAVE VARIABLE $draft
                
                4.SaveStatement:
                ---- Save the draft document.
                LOAD VARIABLE $draft
                SAVE VARIABLE $draft-9
                ---- Save a citation to the draft document.
                LOAD VARIABLE $draft-9
                CALL $citation WITH 1 ARGUMENT
                SAVE VARIABLE $citation-10
                ---- Save the cited draft document to the repository.
                LOAD VARIABLE $draft-9
                SAVE DRAFT $citation-10
                LOAD VARIABLE $citation-10
                SAVE VARIABLE $citation
                
                5.DiscardStatement:
                ---- Save a citation to the draft document.
                LOAD VARIABLE $draft
                CALL $citation WITH 1 ARGUMENT
                SAVE VARIABLE $citation-11
                ---- Drop the cited draft document from the repository.
                DROP DRAFT $citation-11
                
                6.PublishStatement:
                ---- Save the name of the global event bag.
                PUSH LITERAL `/bali/vm/events/v1`
                SAVE VARIABLE $bag-12
                ---- Publish an event to the global event bag.
                PUSH CONSTANT $event
                SAVE MESSAGE $bag-12
                
                7.PostStatement:
                ---- Save the name of the message bag.
                PUSH CONSTANT $bag
                SAVE VARIABLE $bag-13
                ---- Post a message to the named message bag.
                CALL $catalog
                ---- Add an item to the catalog.
                PUSH LITERAL `$text`
                PUSH LITERAL `"This is a message..."`
                CALL $association WITH 2 ARGUMENTS
                CALL $addItem WITH 2 ARGUMENTS
                SAVE MESSAGE $bag-13
                LOAD VARIABLE $result-1
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.CheckoutStatement": 1
                "2.CommitStatement": 19
                "3.CheckoutStatement": 23
                "4.SaveStatement": 41
                "5.DiscardStatement": 50
                "6.PublishStatement": 54
                "7.PostStatement": 58
            ]
            $bytecode: '
                3003800A780AC82980076007280CD0602805D05B800E6007280C600ED882
                4800600780063004800B6006980B3004800C780CC82980086008280CD060
                2806D05B800F6008280C600FD882480060088006600680096009C8158004
                60099004600480036006C8158005B005280480013007880130068002C014
                280A2810D00BD0018802600D5000
            '(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [
                $bag-12
                $bag-13
                $citation
                $citation-10
                $citation-11
                $draft
                $draft-3
                $draft-7
                $draft-9
                $name-2
                $name-5
                $name-6
                $result-1
                $version-4
                $version-8
            ]($type: /bali/collections/Set/v1)
            $messages: [ ]($type: /bali/collections/Set/v1)
        ]
        $test5: [
            $description: "
                This method helps test each type of instruction at least once.
            "($mediaType: "application/bsmd")
            $parameters: [
                $abort: [
                    $description: "
                        This parameter specifies whether or not committing the draft should be aborted.
                    "($mediaType: "application/bsmd")
                    $type: /bali/elements/Text/v1
                ]
            ]
            $procedure: {
                receive $message from bag
            }
            $instructions: "
                1.ReceiveStatement:
                ---- Save the name of the message bag.
                PUSH CONSTANT $bag
                SAVE VARIABLE $bag-2
                ---- Place a message from the message bag on the stack.
                ---- NOTE: this call blocks until a message is available from the bag.
                LOAD MESSAGE $bag-2
                SAVE VARIABLE $message
                LOAD VARIABLE $result-1
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.ReceiveStatement": 1
            ]
            $bytecode: '300680016801800260035000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
                $abort
            ]
            $variables: [
                $bag-2
                $message
                $result-1
            ]($type: /bali/collections/Set/v1)
            $messages: [ ]($type: /bali/collections/Set/v1)
        ]
    ]
    $literals: [
        /bali/collections/Set/v1
        /bali/events/bag
        /bali/events/queue
        /bali/vm/events/v1
        0
        2
        none
        $draft
        $message
        $text
        $type
        $version
        "alpha"
        "bad"
        "good"
        "This is a message..."
    ]($type: /bali/collections/Set/v1)
](
    $type: /bali/types/Primitive/v1
    $tag: #JXPSTDZSDHW4J1N5YF98D45QC8ZAQPXV
    $version: v1
    $permissions: /bali/permissions/public/v1
    $previous: none
)
