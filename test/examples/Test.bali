[
    $description: "
        This type defines a method that tests each type of instruction at least once.
    "($mediaType: "application/bsmd")
    $parent: none
    $constants: [
        $good: "good"
    ]
    $methods: [
        $test1: [
            $description: "
                This method tests each type of instruction at least once.
            "($mediaType: "application/bsmd")
            $type: /bali/elements/Text/v1
            $parameters: [
                $argument: [
                    $description: "
                        This parameter specifies the argument to be passed to the test message.
                    "($mediaType: "application/bsmd")
                    $type: /bali/elements/Text/v1
                ]
            ]
            $procedure: {
                $x := target.test3(argument) handle $exception matching "good" with {
                    return good
                } matching "bad" with {
                    target.test2()
                }
                return "bad"
            }($argument: "ugly")
            $instructions: "
                1.EvaluateStatement:
                PUSH HANDLER 1.EvaluateStatementHandler
                PUSH ARGUMENT $target
                INVOKE $list
                PUSH ARGUMENT $argument
                INVOKE $addItem WITH 2 ARGUMENTS
                SEND $test3 TO COMPONENT WITH ARGUMENTS
                STORE VARIABLE $x
                
                1.EvaluateStatementDone:
                POP HANDLER
                JUMP TO 1.EvaluateStatementSucceeded
                
                1.EvaluateStatementHandler:
                STORE VARIABLE $exception
                
                1.1.HandleBlock:
                LOAD VARIABLE $exception
                PUSH LITERAL `"good"`
                INVOKE $doesMatch WITH 2 ARGUMENTS
                JUMP TO 1.2.HandleBlock ON FALSE
                
                1.1.1.ReturnStatement:
                PUSH CONSTANT $good
                HANDLE RESULT
                
                1.1.HandleBlockDone:
                JUMP TO 1.EvaluateStatementSucceeded
                
                1.2.HandleBlock:
                LOAD VARIABLE $exception
                PUSH LITERAL `"bad"`
                INVOKE $doesMatch WITH 2 ARGUMENTS
                JUMP TO 1.EvaluateStatementFailed ON FALSE
                
                1.2.1.EvaluateStatement:
                PUSH ARGUMENT $target
                SEND $test2 TO COMPONENT
                STORE VARIABLE $result-1
                
                1.2.HandleBlockDone:
                JUMP TO 1.EvaluateStatementSucceeded
                
                1.EvaluateStatementFailed:
                LOAD VARIABLE $exception
                HANDLE EXCEPTION
                
                1.EvaluateStatementSucceeded:
                SKIP INSTRUCTION
                
                2.ReturnStatement:
                PUSH LITERAL `"bad"`
                HANDLE RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.EvaluateStatement": 1
                "1.EvaluateStatementDone": 8
                "1.EvaluateStatementHandler": 10
                "1.1.HandleBlock": 11
                "1.1.1.ReturnStatement": 15
                "1.1.HandleBlockDone": 17
                "1.2.HandleBlock": 18
                "1.2.1.EvaluateStatement": 22
                "1.2.HandleBlockDone": 25
                "1.EvaluateStatementFailed": 26
                "1.EvaluateStatementSucceeded": 28
                "2.ReturnStatement": 29
            ]
            $bytecode: '
                200A3801A04F3802B001C80280034000001C800160012806B02718123001
                E000001C60012805B027181A3801C0018002001C6001E80000002805E000
            '(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
                $argument
            ]
            $variables: [
                $exception
                $result-1
                $x
            ]($type: /bali/collections/Set/v1)
            $messages: [
                $test2
                $test3
            ]($type: /bali/collections/Set/v1)
        ]
        $test2: [
            $description: "
                This method tests each type of instruction at least once.
            "($mediaType: "application/bsmd")
            $type: /bali/collections/Set/v1
            $procedure: {
                return [
                    "alpha"
                ]($type: /bali/collections/Set/v1)
            }
            $instructions: "
                1.ReturnStatement:
                PUSH LITERAL `none`
                INVOKE $catalog
                PUSH LITERAL `$type`
                PUSH LITERAL `/bali/collections/Set/v1`
                INVOKE $setValue WITH 3 ARGUMENTS
                INVOKE $set WITH 2 ARGUMENTS
                PUSH LITERAL `"alpha"`
                INVOKE $addItem WITH 2 ARGUMENTS
                HANDLE RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.ReturnStatement": 1
            ]
            $bytecode: '2802A01428032801B881B07E2804B001E000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [ ]($type: /bali/collections/Set/v1)
            $messages: [ ]($type: /bali/collections/Set/v1)
        ]
        $test3: [
            $description: "
                This method tests each type of instruction at least once.
            "($mediaType: "application/bsmd")
            $parameters: [
                $text: [
                    $description: "
                        This parameter specifies the text to be thrown in an exception.
                    "($mediaType: "application/bsmd")
                    $type: /bali/elements/Text/v1
                ]
            ]
            $procedure: {
                throw text
            }
            $instructions: "
                1.ThrowStatement:
                PUSH ARGUMENT $text
                HANDLE EXCEPTION
            "($mediaType: "application/basm")
            $addresses: [
                "1.ThrowStatement": 1
            ]
            $bytecode: '3802E800'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
                $text
            ]
            $variables: [ ]($type: /bali/collections/Set/v1)
            $messages: [ ]($type: /bali/collections/Set/v1)
        ]
    ]
    $literals: [
        /bali/collections/Set/v1
        none
        $type
        "alpha"
        "bad"
        "good"
    ]($type: /bali/collections/Set/v1)
](
    $name: /bali/tests/PUSH/v1
    $type: /bali/types/Primitive/v1
    $tag: #JXPSTDZSDHW4J1N5YF98D45QC8ZAQPXV
    $version: v1
    $permissions: /bali/permissions/public/v1
    $previous: none
)
